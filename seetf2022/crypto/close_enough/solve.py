# Great sources: https://www.youtube.com/watch?v=C6abHMw8uoo&ab_channel=AndrewMcCrady
#                https://ctf101.org/cryptography/what-is-rsa/

from Crypto.Util.number import long_to_bytes
from Crypto.PublicKey import RSA
from math import gcd

c = 4881495507745813082308282986718149515999022572229780274224400469722585868147852608187509420010185039618775981404400401792885121498931245511345550975906095728230775307758109150488484338848321930294974674504775451613333664851564381516108124030753196722125755223318280818682830523620259537479611172718588812979116127220273108594966911232629219195957347063537672749158765130948724281974252007489981278474243333628204092770981850816536671234821284093955702677837464584916991535090769911997642606614464990834915992346639919961494157328623213393722370119570740146804362651976343633725091450303521253550650219753876236656017

# Gotten using ffm and sage math
p = 96845776633092796976750756604083293463131432427629626840502983978921465315501048940609033368344901501712341570036246053642627694232973824894459222924775539340011044154334742557647259012526754612143195508424045309307675365792617600374726622141082577152346600257278270023727948290295822290679711330374354949753

q = 96845776633092796976750756604083293463131432427629626840502983978921465315501048940609033368344901501712341570036246053642627694232973824894459222924775539340011044154334742557647259012526754612143195508424045309307675365792617600374726622141082577152346600257278270023727948290295822290679711330374354949279

with open("key","r") as f:
    key = RSA.importKey(f.read())
    n = key.n
    e = key.e

totient = ((p-1)*(q-1)) // gcd(p-1,q-1) # lcm(p-1,q-1)
d = pow(e,-1,totient)

m = pow(c,d,n)
print(long_to_bytes(m))

# Learned a lot abt RSA and what happens when p and q are close
