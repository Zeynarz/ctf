Ep 9 (Arbitary read and write)
-------------------------------
When Niklas was spraying structureids,he also added a .a property to every object sprayed

var structure_spray = [];
for(var i=0; i<1000; i++) {
    var array = [13.37];
    array.a = 13.37;        <--- This
    array['p'+i] = 13.37;
    structure_spray.push(array)
}

Now why did he added this property?

Arbitary Read
---------------
Remember that the butterfly structure is like this:

(from Saelo's phrack paper)
--------------------------------------------------------
.. | propY | propX | length | elem0 | elem1 | elem2 | ..
--------------------------------------------------------
               ^            ^
               |            |
               |            |
               |      butterfly ptr
               |
               |
            a property is here

From last episode, we know we have complete control of the butterflies of hax,victim,boxed,unboxed
We can set the butterfly of victim using hax since hax's butterfly is pointing to victim's' metadata
So hax[1] is victim's butterfly

Now when you access victim's property .a, javascript will try printing the value inside butterfly - 0x10

--------------------------------------------------------
.. | propY | propX | length | elem0 | elem1 | elem2 | ..
--------------------------------------------------------
           ^
           |                ^
    0x000062d0007de870      |
                    0x000062d0007de880

This is because if the butterfly is at 0x000062d0007de880, the property will be at 0x000062d0007de870.

So now if you want to read from any ptr, you can just set the butterfly of victim to be ptr+0x10 and then access the a property
Example:
Lets say you want to read from x
hax[1] = (x+0x10 in double form)
return victim.a

There is a problem though, the hax object was made to be an ArrayWithContiguous because it had to deal with objects. (Victim's butterfly was an element in hax's butterfly (hax[1]))
If we were to change/insert any elements in hax, it would be NaN-encoded. 
Which means any double we insert will be added with 0x1000000000000 and we wont be able to insert any ptrs

There is a very easy workaround tho, you can simply set the metadata of hax to the flags of an ArrayOfDouble using outer's properties and the array will be turned to an ArrayOfDouble

Now you can create an arbitary read function
function read(dbl){
    hax[1] = dbl+0x10;
    return victim.a;
}

Arbitary Write
----------------
Arbitary write uses the same idea as arbitary read.
If you want to write to address x,just set victim's butterfly to x+0x10 and set victim.a

function write(where,what){
    hax[1] = where+0x10;
    victim.a = what;
}

So now, we have the ability to arbitary read and arbitary write!

And now what?
---------------
Now we can think about getting a shell etc, how can we do that?
Maybe you can overwrite the ret pointer on the stack and make a ROP chain or smthg

Let's look briefly at what Linus did.
Linus has a fetchAndExec function which downloads a binary and then creates a JITed function. 
This is because the JIT compiler will have to create r/w/x memory to store the asm of the JITed function 
Linus then used the arbitary read function to find out the address of the r/w/x memory (the JITed function memory) and then overwrote the function's assembly with the binary he downloaded
Now when he executes the JITed function,webkit will execute the binary he downloaded

Cool!

But some versions of WebKit dont have JIT, for example in the Nintendo switch, so if you manage to find a vulnerability and get arbitary read and write on the webkit in nintendo switch
you might need to craft some ROP chains to execute shellcode

Of course you can also overwrite flags and give yourself the permissions to do stuff that javascript normally would'nt let you
For example accesing other websites


Thank you liveoverflow for creating this awesome playlist. ***Liveoverflow's outro song plays***
