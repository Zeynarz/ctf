Ep 1
==========================
Just introduction 

Ep 2 (Setup and Debug jsc)
==========================
Exploit works on Safari 12.0.1

Safari is based on Webkit
What is Webkit?
webkit is a web browser engine, which means it converts html/css/js etc to a visual web page 
There are two main components in webkit
WebCore - html rendering
JavaScriptCore - js engine/interpreter?

To debug webkit and get its source code, we will take a visit to webkit's git repo
git clone git://git.webkit.org/WebKit.git  
git checkout 3af5ce129e6636350a887d01237a65c2fce77823 

commit 3af5ce129e6636350a887d01237a65c2fce77823 was the commit before the exploit was patched 

Building webkit 
cd WebKit
Tools/Scripts/build-webkit --jsc-only -debug

Running javascriptcore
./WebKitBuild/Debug/bin/jsc

There is a very useful function in this jsc build called describe()
describe essentially gives information about an object (like the ptr of a butterfly etc)
There are a couple types of arrays (found with describe()):
[1,2,3]                     = CopyOnWriteArrayWithInt32 (cause it only got integers in the array )
[1,2,3.12]                  = CopyOnWriteArrayWithDouble
[1,2,3.123,"asd"]           = CopyOnWriteArrayWithContiguous (most generic/flexible, can hold any type)
[{},1,13.37,[1,2,3],"asds"] = ArrayWithContiguous (dk why no CopyOnWrite)

(using lldb to debug the jscore)
When you describe() a list/array, it also gives you additional information like the structure id, the object ptr and something called a butterfly
----------------------------------------------------------------------------------
>>> a = [1, 2, 3, 4]
1,2,3,4
>>> describe(a)
Object: 0x1080b4340 with butterfly 0x8000e4008 (Structure 0x1080f2a00:[Array, {},
    ArrayWithInt32, Proto:0x1080c80a0, Leaf]), StructureID: 97
----------------------------------------------------------------------------------

If you examine the object ptr:
----------------------------------------------------------------------------------
(lldb) x/8gx 0x1080b4340
0x1080b4340: 0x0108210500000061 0x00000008000e4008 <-- butterfly!!
0x1080b4350: 0x00000000badbeef0 0x00000000badbeef0
0x1080b4360: 0x00000000badbeef0 0x00000000badbeef0
0x1080b4370: 0x00000000badbeef0 0x00000000badbeef0
----------------------------------------------------------------------------------
The butterfly ptr is stored in the object 
And it looks like there are some other stuff that are stored in the object too

If you examine the butterfly:
----------------------------------------------------------------------------------
(lldb) x/8gx 0x00000008000e4008
0x8000e4008: 0xffff000000000001 0xffff000000000002
0x8000e4018: 0xffff000000000003 0xffff000000000004
0x8000e4028: 0x00000000badbeef0 0x00000000badbeef0
0x8000e4038: 0x00000000badbeef0 0x00000000badbeef0
----------------------------------------------------------------------------------

our values that we stored in the list are in the butterfly.
There are also 0xffff bytes with our values for some reason.


TODO
(find how doubles and floats are stored in memory)

